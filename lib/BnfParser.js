// Generated by CoffeeScript 1.7.1
(function() {
  var BnfParser, YParser,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  YParser = require('./YParser');

  BnfParser = (function(_super) {
    __extends(BnfParser, _super);

    function BnfParser(bnf) {
      this.bnf = bnf;
      BnfParser.__super__.constructor.call(this);
      this.hookName = null;
      this.capToField = false;
      this.capName = null;
      this.astName = null;
      this.repeater = "1";
      this.peek = false;
      this.orError = false;
      this.loadString(this.bnf);
      this.initTokens();
      this.initRules();
      this.setBreakOnUnknownToken();
      this.init();
      this.parseBnf();
    }

    BnfParser.prototype.initTokens = function() {
      this.addTokRule('SPACE', function() {
        return this.repeat("+", function() {
          return this.readSpaces() || this.readEOL();
        });
      });
      this.addTokRule('CAP_TO_FIELD', function() {
        return this.readChar('.');
      });
      this.addTokRule('CAP', function() {
        return (!this.readText('::')) && this.readChar(':');
      });
      this.addTokRule('AST', function() {
        return this.readChar('#');
      });
      this.addTokRule('RULE_ENTRY', function() {
        return this.readText('::');
      });
      this.addTokRule('TOKEN_ENTRY', function() {
        return this.readText('=');
      });
      this.addTokRule('PEEK', function() {
        return this.readChar('@');
      });
      this.addTokRule('ID', function() {
        return this.readIdentifier();
      });
      this.addTokRule('REPEATER', function() {
        return (this.readChar('+')) || (this.readChar('*')) || (this.readChar('?'));
      });
      this.addTokRule('RULE_END', function() {
        return this.readChar(';');
      });
      this.addTokRule('GROUP_START', function() {
        return this.readChar('[');
      });
      this.addTokRule('GROUP_END', function() {
        return this.readChar(']');
      });
      this.addTokRule('NOT', function() {
        return this.readChar('^');
      });
      this.addTokRule('OR', function() {
        return this.readChar('|');
      });
      this.addTokRule('HOOK_START', function() {
        return this.readChar('(');
      });
      this.addTokRule('HOOK_END', function() {
        return this.readChar(')');
      });
      this.addTokRule('OR_ERROR', function() {
        return this.readChar('!');
      });
      this.addTokRule('STR', function() {
        if (!this.readChar("'")) {
          return false;
        }
        return this.repeat("*", function() {
          if (this.readText("\\'")) {
            return true;
          }
          return (!this.readChar("'")) && this.readAny();
        });
      });
      return this.addTokRule('STR_DBL', function() {
        if (!this.readChar('"')) {
          return false;
        }
        return this.repeat("*", function() {
          if (this.readText('\\"')) {
            return true;
          }
          return (!this.readChar('"')) && this.readAny();
        });
      });
    };

    BnfParser.prototype.initRules = function() {
      this.addRule("main", this.ruleMain);
      this.addRule("rule", this.ruleRule);
      this.addRule("tokenRule", this.ruleTokenRule);
      this.addRule("group_body", this.ruleGroupBody);
      this.addRule("or", this.ruleOr);
      this.addRule("and", this.ruleAnd);
      this.addRule("token", this.ruleToken);
      this.addRule("id", this.ruleId);
      this.addRule("not", this.ruleNot);
      this.addRule("cap", this.ruleCap);
      this.addRule("ast", this.ruleAst);
      this.addRule("repeater", this.ruleRepeater);
      this.addRule("group", this.ruleGroup);
      this.addRule("peek", this.rulePeek);
      this.addRule("orError", this.ruleOrError);
      this.addRule("hook", this.ruleHook);
      return this.addRule("debug", this.ruleDebug);
    };

    BnfParser.prototype.ruleMain = function(ast) {
      while ((this.parse("rule", ast)) || (this.parse("tokenRule", ast))) {
        this.readToken("SPACE");
        if (this.isEndToken()) {
          return true;
        }
      }
      this.error();
      return false;
    };

    BnfParser.prototype.ruleTokenRule = function(ast) {
      var nameTok, node;
      node = new YParser.Ast("tokenRule");
      this.readToken("SPACE");
      nameTok = this.getToken("ID");
      if (nameTok === null) {
        return false;
      }
      node.name = nameTok.data;
      this.readToken("SPACE");
      if (!this.readToken("TOKEN_ENTRY")) {
        return false;
      }
      this.readToken("SPACE");
      if (!this.parse("group_body", node)) {
        this.error();
      }
      if (!this.readToken("RULE_END")) {
        this.error();
      }
      ast.nodes.push(node);
      return true;
    };

    BnfParser.prototype.ruleRule = function(ast) {
      var nameTok, node;
      node = new YParser.Ast("rule");
      this.readToken("SPACE");
      nameTok = this.getToken("ID");
      if (nameTok === null) {
        return false;
      }
      node.name = nameTok.data;
      this.readToken("SPACE");
      if (!this.readToken("RULE_ENTRY")) {
        return false;
      }
      this.readToken("SPACE");
      if (!this.parse("group_body", node)) {
        this.error();
      }
      if (!this.readToken("RULE_END")) {
        this.error();
      }
      ast.nodes.push(node);
      return true;
    };

    BnfParser.prototype.ruleGroupBody = function(ast) {
      return (this.parse("or", ast)) || (this.parse("and", ast));
    };

    BnfParser.prototype.ruleOr = function(ast) {
      var node, ret;
      node = new YParser.Ast("or");
      this.handleToken(node);
      ret = ((function(_this) {
        return function() {
          return _this.repeat("+", function() {
            if (!this.parse("token", node)) {
              return false;
            }
            this.readToken("SPACE");
            if ((this.peekToken("RULE_END")) || (this.peekToken("GROUP_END")) || (this.peekToken("NOT"))) {
              return true;
            }
            this.readToken("SPACE");
            if (!this.readToken("OR")) {
              return false;
            }
            this.readToken("SPACE");
            return true;
          });
        };
      })(this))();
      if (ret === false) {
        this.capToField = node.toField;
        this.capName = node.cap;
        this.hookName = node.hook;
        this.astName = node.ast;
        this.repeater = node.repeat;
        this.peek = node.peek;
        this.orError = node.orError;
        return false;
      }
      this.repeat("*", (function(_this) {
        return function() {
          return _this.parse("not", node);
        };
      })(this));
      this.readToken("SPACE");
      ast.nodes.push(node);
      return ret;
    };

    BnfParser.prototype.ruleAnd = function(ast) {
      var node, ret;
      node = new YParser.Ast("and");
      this.handleToken(node);
      ret = ((function(_this) {
        return function() {
          return _this.repeat("+", function() {
            if (!this.parse("token", node)) {
              return false;
            }
            if (this.peekToken("RULE_END" || this.peekToken("GROUP_END" || this.peekToken("NOT")))) {
              return true;
            }
            if (!this.readToken("SPACE")) {
              return false;
            }
            return true;
          });
        };
      })(this))();
      if (ret === true) {
        ast.nodes.push(node);
      } else {
        this.capToField = node.toField;
        this.capName = node.cap;
        this.hookName = node.hook;
        this.astName = node.ast;
        this.repeater = node.repeat;
      }
      return ret;
    };

    BnfParser.prototype.ruleNot = function(ast) {
      var node;
      node = new YParser.Ast("not");
      if (!this.readToken("NOT")) {
        return false;
      }
      this.readToken("SPACE");
      this.parse("token", node);
      this.handleToken(node);
      ast.nodes.push(node);
      return true;
    };

    BnfParser.prototype.ruleToken = function(ast) {
      var legitTypes, token;
      this.parse("orError");
      this.parse("peek");
      (this.parse("cap", ast)) || (this.parse("ast", ast));
      if (this.parse("id", ast)) {
        return true;
      }
      if (this.parse("group", ast)) {
        return true;
      }
      if (this.parse("hook", ast)) {
        return true;
      }
      if (this.parse("debug", ast)) {
        return true;
      }
      legitTypes = ["STR", "STR_DBL"];
      token = this.peekToken();
      if (token === null) {
        return false;
      }
      if ((legitTypes.indexOf(token.type)) === -1) {
        return false;
      }
      token = this.getToken();
      this.parse("repeater", ast);
      token = ast.addToken(token);
      token.data = this.cleanStr(token.data);
      this.handleToken(token);
      return true;
    };

    BnfParser.prototype.cleanStr = function(s) {
      var i, ret, tmp;
      ret = "";
      tmp = s.slice(1, -1);
      i = 0;
      while (i < tmp.length) {
        if (tmp[i] === '\\') {
          ret += tmp[i + 1];
          i += 2;
          continue;
        }
        ret += tmp[i];
        ++i;
      }
      return ret;
    };

    BnfParser.prototype.ruleId = function(ast) {
      var tok;
      if (this.peekToken("ID")) {
        tok = this.getToken("ID");
        this.parse("repeater", ast);
        this.handleToken(ast.addToken(tok));
        return true;
      }
      return false;
    };

    BnfParser.prototype.ruleGroup = function(ast) {
      if (!this.readToken("GROUP_START")) {
        return false;
      }
      this.readToken("SPACE");
      if (!this.parse("group_body", ast)) {
        return false;
      }
      this.readToken("SPACE");
      if (!this.readToken("GROUP_END")) {
        return false;
      }
      this.parse("repeater", ast);
      ast.nodes.slice(-1)[0].repeat = this.repeater;
      this.repeater = "1";
      return true;
    };

    BnfParser.prototype.ruleHook = function(ast) {
      var hook;
      if (!this.readToken("HOOK_START")) {
        return false;
      }
      hook = this.getToken("ID");
      if (hook === null) {
        return false;
      }
      if (!this.readToken("HOOK_END")) {
        return false;
      }
      hook = this.handleToken(ast.addToken(hook));
      hook.type = "hook";
      return true;
    };

    BnfParser.prototype.ruleDebug = function(ast) {
      var debug;
      if (!this.readToken("HOOK_START")) {
        return false;
      }
      debug = this.getToken("STR");
      if (debug === null) {
        debug = this.getToken("STR_DBL");
      }
      if (debug === null) {
        return false;
      }
      if (!this.readToken("HOOK_END")) {
        return false;
      }
      debug = this.handleToken(ast.addToken(debug));
      debug.type = "debug";
      debug.data = this.cleanStr(debug.data);
      return true;
    };

    BnfParser.prototype.rulePeek = function(ast) {
      this.peek = false;
      if (this.readToken("PEEK")) {
        this.peek = true;
        return true;
      }
      return false;
    };

    BnfParser.prototype.ruleOrError = function(ast) {
      this.orError = false;
      if (this.readToken("OR_ERROR")) {
        this.orError = true;
        return true;
      }
      return false;
    };

    BnfParser.prototype.ruleCap = function(ast) {
      var capName, capToField, hookName;
      capToField = false;
      if (this.readToken("CAP_TO_FIELD")) {
        capToField = true;
      }
      capName = this.getToken("ID");
      if (capName === null) {
        return false;
      }
      capName = capName.data;
      if (this.readToken("HOOK_START")) {
        hookName = this.getToken("ID");
        if (hookName === null) {
          this.error();
          return false;
        }
        this.hookName = hookName.data;
        if (!this.readToken("HOOK_END")) {
          this.error();
          return false;
        }
      }
      if (!this.readToken("CAP")) {
        return false;
      }
      this.capToField = capToField;
      this.capName = capName;
      return true;
    };

    BnfParser.prototype.ruleAst = function(ast) {
      var astName, hookName;
      astName = this.getToken("ID");
      if (astName === null) {
        return false;
      }
      astName = astName.data;
      if (this.readToken("HOOK_START")) {
        hookName = this.getToken("ID");
        if (hookName === null) {
          this.error();
          return false;
        }
        this.hookName = hookName.data;
        if (!this.readToken("HOOK_END")) {
          this.error();
          return false;
        }
      }
      if (!this.readToken("AST")) {
        return false;
      }
      this.astName = astName;
      return true;
    };

    BnfParser.prototype.ruleRepeater = function(ast) {
      var token;
      token = this.getToken("REPEATER");
      if (token === null) {
        return false;
      }
      this.repeater = token.data;
      return true;
    };

    BnfParser.prototype.handleToken = function(token) {
      token.toField = this.capToField;
      token.cap = this.capName;
      token.hook = this.hookName;
      token.ast = this.astName;
      token.repeat = this.repeater;
      token.peek = this.peek;
      token.orError = this.orError;
      this.capToField = false;
      this.capName = null;
      this.hookName = null;
      this.astName = null;
      this.repeater = "1";
      this.peek = false;
      this.orError = false;
      return token;
    };

    BnfParser.prototype.parseBnf = function() {
      this.parse();
      return null;
    };

    return BnfParser;

  })(YParser);

  module.exports = BnfParser;

}).call(this);
