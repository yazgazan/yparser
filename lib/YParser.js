// Generated by CoffeeScript 1.7.1
(function() {
  var Ast, AstToken, Tokenizer, YParser,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Tokenizer = require('./Tokenizer');

  AstToken = (function() {
    function AstToken(token) {
      this.type = token.type;
      this.data = token.data;
      this.line = function() {
        return token.line;
      };
      this.pos = function() {
        return token.pos;
      };
      this.token = function() {
        return token;
      };
      null;
    }

    return AstToken;

  })();

  Ast = (function() {
    function Ast(type) {
      this.type = type != null ? type : null;
      this.nodes = new Array;
    }

    Ast.prototype["new"] = function(type) {
      var sub;
      sub = new Ast(type);
      this.nodes.push(sub);
      return sub;
    };

    Ast.prototype.addToken = function(token) {
      var ret;
      ret = new AstToken(token);
      this.nodes.push(ret);
      return ret;
    };

    return Ast;

  })();

  YParser = (function(_super) {
    __extends(YParser, _super);

    function YParser() {
      this.rules = new Object;
      YParser.__super__.constructor.call(this);
    }

    YParser.prototype.init = function(s) {
      if (s == null) {
        s = null;
      }
      if (s !== null) {
        this.loadString(s);
      }
      this.ast = new Ast("root");
      this.tokenize();
      return this.curToken = 0;
    };

    YParser.prototype.isEndToken = function() {
      return this.curToken === this.tokens.length;
    };

    YParser.prototype.peekToken = function(type) {
      if (type == null) {
        type = null;
      }
      if (this.isEndToken()) {
        return null;
      }
      if (type !== null) {
        if (this.peekToken().type === type) {
          return this.peekToken();
        }
        return null;
      }
      return this.tokens[this.curToken];
    };

    YParser.prototype.getToken = function(type) {
      var tok;
      tok = this.peekToken(type);
      if (tok === null) {
        return null;
      }
      ++this.curToken;
      return tok;
    };

    YParser.prototype.parse = function(rule, ast) {
      var backupPos, ret;
      if (rule == null) {
        rule = "main";
      }
      if (ast == null) {
        ast = this.ast;
      }
      if (this.rules[rule] == null) {
        throw Error("Unknown rule " + rule + ".");
      }
      backupPos = this.curToken;
      ret = this.rules[rule].call(this, ast);
      if (ret === false) {
        this.curToken = backupPos;
      }
      return ret;
    };

    YParser.prototype.addRule = function(name, func) {
      return this.rules[name] = func;
    };

    YParser.prototype._readToken = function(tokName) {
      if ((this.peekToken(tokName)) === null) {
        return false;
      }
      this.getToken();
      return true;
    };

    YParser.prototype.repeat = function(repeater, func) {
      if (repeater === "1") {
        return func.call(this);
      }
      if (repeater === "?") {
        func.call(this);
        return true;
      }
      if (repeater === "*") {
        while (func.call(this)) {
          null;
        }
        return true;
      }
      if (repeater === "+") {
        if (!func.call(this)) {
          return false;
        }
        while (func.call(this)) {
          null;
        }
        return true;
      }
    };

    YParser.prototype.readToken = function(tokName, repeater) {
      if (repeater == null) {
        repeater = "1";
      }
      return this.repeat(repeater, function() {
        return this._readToken(tokName);
      });
    };

    YParser.prototype.recreateLine = function(token) {
      var line, ret, tok, _i, _len, _ref;
      ret = "";
      line = token.line;
      if ((typeof line) === "function") {
        line = token.line();
      }
      _ref = this.tokens;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tok = _ref[_i];
        if ((tok.line === (line - 1)) && (tok.data.indexOf("\n")) !== -1) {
          ret += (tok.data.split("\n")).slice(-1)[0];
        }
        if (tok.line === line) {
          ret += (tok.data.split("\n"))[0];
        }
      }
      return ret;
    };

    YParser.prototype.generateCursor = function(token) {
      var i, ret, _i, _ref;
      ret = "";
      if (token.pos > 1) {
        for (i = _i = 1, _ref = token.pos - 1; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
          console.log(i);
          ret += " ";
        }
      }
      ret += "^";
      return ret;
    };

    YParser.prototype.error = function(token) {
      var cursor, line, msg;
      if (token == null) {
        token = null;
      }
      if ((token !== null) && !(token instanceof AstToken)) {
        token = null;
      }
      if (token === null) {
        token = this.peekToken();
      }
      if (token === null) {
        token = this.tokens.slice(-1)[0];
      }
      console.log(token);
      line = this.recreateLine(token);
      cursor = this.generateCursor(token);
      msg = "Error parsing file, unexpected token " + (JSON.stringify(token.data));
      msg += " at " + token.line + ":" + token.pos + ":\n" + line + "\n" + cursor;
      throw Error(msg);
    };

    return YParser;

  })(Tokenizer);

  YParser.Tokenizer = Tokenizer;

  YParser.AstToken = AstToken;

  YParser.Ast = Ast;

  module.exports = YParser;

}).call(this);
