// Generated by CoffeeScript 1.7.1
(function() {
  var Parser;

  Parser = (function() {
    function Parser() {
      this.pos = 0;
      this.buff = "";
      this.caps = new Object;
      this.line = 1;
      this.cpos = 1;
    }

    Parser.prototype.loadString = function(buff) {
      this.buff = buff;
      return this.pos = 0;
    };

    Parser.prototype.remaining = function() {
      return this.buff.slice(this.pos);
    };

    Parser.prototype.consume = function(n) {
      var i, _i;
      if (n == null) {
        n = 1;
      }
      for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
        if (this.buff[this.pos + i] === "\n") {
          ++this.line;
          this.cpos = 1;
        } else {
          ++this.cpos;
        }
      }
      return this.pos += n;
    };

    Parser.prototype.isEnd = function() {
      return this.pos >= this.buff.length;
    };

    Parser.prototype.startCap = function(name) {
      return this.caps[name] = this.pos;
    };

    Parser.prototype.endCap = function(name) {
      return this.buff.slice(this.caps[name], this.pos);
    };

    Parser.prototype.peekChar = function(c) {
      if (this.isEnd()) {
        return false;
      }
      return c === this.buff[this.pos];
    };

    Parser.prototype.peekRange = function(a, b) {
      if (this.isEnd()) {
        return false;
      }
      if (a > b) {
        return false;
      }
      return (this.buff[this.pos] >= a) && (this.buff[this.pos] <= b);
    };

    Parser.prototype.peekText = function(s) {
      if ((this.pos + s.length) > this.buff.length) {
        return false;
      }
      if (s === this.buff.slice(this.pos, this.pos + s.length)) {
        return true;
      }
      return false;
    };

    Parser.prototype.peekUntil = function(c) {
      var i;
      if (this.isEnd()) {
        return false;
      }
      i = this.pos;
      while (i < this.buff.length) {
        if (this.buff[i] === c) {
          return i - this.pos;
        }
        i++;
      }
      return false;
    };

    Parser.prototype.peekAny = function() {
      return !this.isEnd();
    };

    Parser.prototype.peekAlpha = function() {
      return (this.peekRange('a', 'z')) || (this.peekRange('A', 'Z'));
    };

    Parser.prototype.peekNum = function() {
      return this.peekRange('0', '9');
    };

    Parser.prototype.peekAlphaNum = function() {
      return this.peekAlpha() || this.peekNum();
    };

    Parser.prototype.peekSpace = function() {
      return (this.peekChar(' ')) || (this.peekChar('\t'));
    };

    Parser.prototype.peekAll = function() {
      return !this.isEnd();
    };

    Parser.prototype.readChar = function(c) {
      if (!this.peekChar(c)) {
        return false;
      }
      this.consume();
      return true;
    };

    Parser.prototype.readRange = function(a, b) {
      if (!this.peekRange(a, b)) {
        return false;
      }
      this.consume();
      return true;
    };

    Parser.prototype.readText = function(s) {
      if (!this.peekText(s)) {
        return false;
      }
      this.consume(s.length);
      return true;
    };

    Parser.prototype.readUntil = function(c) {
      var n;
      n = this.peekUntil(c);
      if (n === false) {
        return false;
      }
      this.consume(n);
      return true;
    };

    Parser.prototype.readAny = function() {
      if (!this.peekAny()) {
        return false;
      }
      this.consume();
      return true;
    };

    Parser.prototype.readAlpha = function() {
      if (!this.peekAlpha()) {
        return false;
      }
      this.consume();
      return true;
    };

    Parser.prototype.readNum = function() {
      if (!this.peekNum()) {
        return false;
      }
      this.consume();
      return true;
    };

    Parser.prototype.readAlphaNum = function() {
      if (!this.peekAlphaNum()) {
        return false;
      }
      this.consume();
      return true;
    };

    Parser.prototype.readIdentifier = function() {
      if (!(this.readAlpha() || this.readChar('_'))) {
        return false;
      }
      while (this.readAlphaNum() || this.readChar('_')) {
        null;
      }
      return true;
    };

    Parser.prototype.readSpace = function() {
      if (!this.peekSpace()) {
        return false;
      }
      this.consume();
      return true;
    };

    Parser.prototype.readSpaces = function() {
      if (!this.readSpace()) {
        return false;
      }
      while (this.readSpace()) {
        null;
      }
      return true;
    };

    Parser.prototype.readInt = function() {
      if (!this.readNum()) {
        return false;
      }
      while (this.readNum()) {
        null;
      }
      return true;
    };

    Parser.prototype.readEOF = function() {
      return this.isEnd();
    };

    Parser.prototype.readEOL = function() {
      return (this.readText("\r\n")) || this.readChar("\n");
    };

    Parser.prototype.readAll = function() {
      var n;
      if (!this.peekAll()) {
        return false;
      }
      n = this.buff.length - this.pos;
      this.consume(n);
      return true;
    };

    return Parser;

  })();

  module.exports = Parser;

}).call(this);
